// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.4, generator: @autorest/go@4.0.0-preview.70)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package speechclient

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ModelsClient contains the methods for the Models group.
// Don't use this type directly, use a constructor function instead.
type ModelsClient struct {
	internal *azcore.Client
	endpoint string
}

// AuthorizeCopy - This method can be used to allow copying a model from another speech resource. Only custom models can be
// copied from another speech resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - modelCopyAuthorizationDefinition - The body contains the Azure Resource ID of the source speech resource.
//   - options - ModelsClientAuthorizeCopyOptions contains the optional parameters for the ModelsClient.AuthorizeCopy method.
func (client *ModelsClient) AuthorizeCopy(ctx context.Context, modelCopyAuthorizationDefinition ModelCopyAuthorizationDefinition, options *ModelsClientAuthorizeCopyOptions) (ModelsClientAuthorizeCopyResponse, error) {
	var err error
	req, err := client.authorizeCopyCreateRequest(ctx, modelCopyAuthorizationDefinition, options)
	if err != nil {
		return ModelsClientAuthorizeCopyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientAuthorizeCopyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientAuthorizeCopyResponse{}, err
	}
	resp, err := client.authorizeCopyHandleResponse(httpResp)
	return resp, err
}

// authorizeCopyCreateRequest creates the AuthorizeCopy request.
func (client *ModelsClient) authorizeCopyCreateRequest(ctx context.Context, modelCopyAuthorizationDefinition ModelCopyAuthorizationDefinition, _ *ModelsClientAuthorizeCopyOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models:authorizecopy"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, modelCopyAuthorizationDefinition); err != nil {
	return nil, err
}
;	return req, nil
}

// authorizeCopyHandleResponse handles the AuthorizeCopy response.
func (client *ModelsClient) authorizeCopyHandleResponse(resp *http.Response) (ModelsClientAuthorizeCopyResponse, error) {
	result := ModelsClientAuthorizeCopyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModelCopyAuthorization); err != nil {
		return ModelsClientAuthorizeCopyResponse{}, err
	}
	return result, nil
}

// BeginCopy - This method can be used to copy a model from this speech resource to a target one. The authorization is obtained
// on the target speech resource. Only custom models can be copied to another speech
// resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the model that will be copied.
//   - modelCopyAuthorization - The body contains the authorization to copy to the target speech resource.
//   - options - ModelsClientBeginCopyOptions contains the optional parameters for the ModelsClient.BeginCopy method.
func (client *ModelsClient) BeginCopy(ctx context.Context, id string, modelCopyAuthorization ModelCopyAuthorization, options *ModelsClientBeginCopyOptions) (*runtime.Poller[ModelsClientCopyResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.copyOperation(ctx, id, modelCopyAuthorization, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[ModelsClientCopyResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[ModelsClientCopyResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Copy - This method can be used to copy a model from this speech resource to a target one. The authorization is obtained
// on the target speech resource. Only custom models can be copied to another speech
// resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
func (client *ModelsClient) copyOperation(ctx context.Context, id string, modelCopyAuthorization ModelCopyAuthorization, options *ModelsClientBeginCopyOptions) (*http.Response, error) {
	var err error
	req, err := client.copyCreateRequest(ctx, id, modelCopyAuthorization, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// copyCreateRequest creates the Copy request.
func (client *ModelsClient) copyCreateRequest(ctx context.Context, id string, modelCopyAuthorization ModelCopyAuthorization, _ *ModelsClientBeginCopyOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}:copy"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, modelCopyAuthorization); err != nil {
	return nil, err
}
;	return req, nil
}

// Create - Creates a new model.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - model - The details of the new model.
//   - options - ModelsClientCreateOptions contains the optional parameters for the ModelsClient.Create method.
func (client *ModelsClient) Create(ctx context.Context, model CustomModel, options *ModelsClientCreateOptions) (ModelsClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, model, options)
	if err != nil {
		return ModelsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *ModelsClient) createCreateRequest(ctx context.Context, model CustomModel, _ *ModelsClientCreateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, model); err != nil {
	return nil, err
}
;	return req, nil
}

// createHandleResponse handles the Create response.
func (client *ModelsClient) createHandleResponse(resp *http.Response) (ModelsClientCreateResponse, error) {
	result := ModelsClientCreateResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomModel); err != nil {
		return ModelsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the model identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the model.
//   - options - ModelsClientDeleteOptions contains the optional parameters for the ModelsClient.Delete method.
func (client *ModelsClient) Delete(ctx context.Context, id string, options *ModelsClientDeleteOptions) (ModelsClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, id, options)
	if err != nil {
		return ModelsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientDeleteResponse{}, err
	}
	return ModelsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ModelsClient) deleteCreateRequest(ctx context.Context, id string, _ *ModelsClientDeleteOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetBaseModel - Gets the base model identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the base model.
//   - options - ModelsClientGetBaseModelOptions contains the optional parameters for the ModelsClient.GetBaseModel method.
func (client *ModelsClient) GetBaseModel(ctx context.Context, id string, options *ModelsClientGetBaseModelOptions) (ModelsClientGetBaseModelResponse, error) {
	var err error
	req, err := client.getBaseModelCreateRequest(ctx, id, options)
	if err != nil {
		return ModelsClientGetBaseModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientGetBaseModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientGetBaseModelResponse{}, err
	}
	resp, err := client.getBaseModelHandleResponse(httpResp)
	return resp, err
}

// getBaseModelCreateRequest creates the GetBaseModel request.
func (client *ModelsClient) getBaseModelCreateRequest(ctx context.Context, id string, _ *ModelsClientGetBaseModelOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/base/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBaseModelHandleResponse handles the GetBaseModel response.
func (client *ModelsClient) getBaseModelHandleResponse(resp *http.Response) (ModelsClientGetBaseModelResponse, error) {
	result := ModelsClientGetBaseModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BaseModel); err != nil {
		return ModelsClientGetBaseModelResponse{}, err
	}
	return result, nil
}

// GetBaseModelManifest - Returns an manifest for this base model which can be used in an on-premise container.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The ID of the model to generate a manifest for.
//   - options - ModelsClientGetBaseModelManifestOptions contains the optional parameters for the ModelsClient.GetBaseModelManifest
//     method.
func (client *ModelsClient) GetBaseModelManifest(ctx context.Context, id string, options *ModelsClientGetBaseModelManifestOptions) (ModelsClientGetBaseModelManifestResponse, error) {
	var err error
	req, err := client.getBaseModelManifestCreateRequest(ctx, id, options)
	if err != nil {
		return ModelsClientGetBaseModelManifestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientGetBaseModelManifestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientGetBaseModelManifestResponse{}, err
	}
	resp, err := client.getBaseModelManifestHandleResponse(httpResp)
	return resp, err
}

// getBaseModelManifestCreateRequest creates the GetBaseModelManifest request.
func (client *ModelsClient) getBaseModelManifestCreateRequest(ctx context.Context, id string, options *ModelsClientGetBaseModelManifestOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/base/{id}/manifest"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBaseModelManifestHandleResponse handles the GetBaseModelManifest response.
func (client *ModelsClient) getBaseModelManifestHandleResponse(resp *http.Response) (ModelsClientGetBaseModelManifestResponse, error) {
	result := ModelsClientGetBaseModelManifestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModelManifest); err != nil {
		return ModelsClientGetBaseModelManifestResponse{}, err
	}
	return result, nil
}

// GetCustomModel - Gets the model identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the model.
//   - options - ModelsClientGetCustomModelOptions contains the optional parameters for the ModelsClient.GetCustomModel method.
func (client *ModelsClient) GetCustomModel(ctx context.Context, id string, options *ModelsClientGetCustomModelOptions) (ModelsClientGetCustomModelResponse, error) {
	var err error
	req, err := client.getCustomModelCreateRequest(ctx, id, options)
	if err != nil {
		return ModelsClientGetCustomModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientGetCustomModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientGetCustomModelResponse{}, err
	}
	resp, err := client.getCustomModelHandleResponse(httpResp)
	return resp, err
}

// getCustomModelCreateRequest creates the GetCustomModel request.
func (client *ModelsClient) getCustomModelCreateRequest(ctx context.Context, id string, _ *ModelsClientGetCustomModelOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getCustomModelHandleResponse handles the GetCustomModel response.
func (client *ModelsClient) getCustomModelHandleResponse(resp *http.Response) (ModelsClientGetCustomModelResponse, error) {
	result := ModelsClientGetCustomModelResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return ModelsClientGetCustomModelResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomModel); err != nil {
		return ModelsClientGetCustomModelResponse{}, err
	}
	return result, nil
}

// GetCustomModelManifest - Returns an manifest for this model which can be used in an on-premise container.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The ID of the model to generate a manifest for.
//   - options - ModelsClientGetCustomModelManifestOptions contains the optional parameters for the ModelsClient.GetCustomModelManifest
//     method.
func (client *ModelsClient) GetCustomModelManifest(ctx context.Context, id string, options *ModelsClientGetCustomModelManifestOptions) (ModelsClientGetCustomModelManifestResponse, error) {
	var err error
	req, err := client.getCustomModelManifestCreateRequest(ctx, id, options)
	if err != nil {
		return ModelsClientGetCustomModelManifestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientGetCustomModelManifestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientGetCustomModelManifestResponse{}, err
	}
	resp, err := client.getCustomModelManifestHandleResponse(httpResp)
	return resp, err
}

// getCustomModelManifestCreateRequest creates the GetCustomModelManifest request.
func (client *ModelsClient) getCustomModelManifestCreateRequest(ctx context.Context, id string, options *ModelsClientGetCustomModelManifestOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}/manifest"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getCustomModelManifestHandleResponse handles the GetCustomModelManifest response.
func (client *ModelsClient) getCustomModelManifestHandleResponse(resp *http.Response) (ModelsClientGetCustomModelManifestResponse, error) {
	result := ModelsClientGetCustomModelManifestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModelManifest); err != nil {
		return ModelsClientGetCustomModelManifestResponse{}, err
	}
	return result, nil
}

// GetFile - Gets one specific file (identified with fileId) from a model (identified with id).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the model.
//   - fileID - The identifier of the file.
//   - options - ModelsClientGetFileOptions contains the optional parameters for the ModelsClient.GetFile method.
func (client *ModelsClient) GetFile(ctx context.Context, id string, fileID string, options *ModelsClientGetFileOptions) (ModelsClientGetFileResponse, error) {
	var err error
	req, err := client.getFileCreateRequest(ctx, id, fileID, options)
	if err != nil {
		return ModelsClientGetFileResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientGetFileResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientGetFileResponse{}, err
	}
	resp, err := client.getFileHandleResponse(httpResp)
	return resp, err
}

// getFileCreateRequest creates the GetFile request.
func (client *ModelsClient) getFileCreateRequest(ctx context.Context, id string, fileID string, options *ModelsClientGetFileOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}/files/{fileId}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	if fileID == "" {
		return nil, errors.New("parameter fileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileId}", url.PathEscape(fileID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFileHandleResponse handles the GetFile response.
func (client *ModelsClient) getFileHandleResponse(resp *http.Response) (ModelsClientGetFileResponse, error) {
	result := ModelsClientGetFileResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.File); err != nil {
		return ModelsClientGetFileResponse{}, err
	}
	return result, nil
}

// NewListBaseModelsPager - Gets the list of base models for the authenticated subscription.
//
// Generated from API version 3.2
//   - options - ModelsClientListBaseModelsOptions contains the optional parameters for the ModelsClient.NewListBaseModelsPager
//     method.
func (client *ModelsClient) NewListBaseModelsPager(options *ModelsClientListBaseModelsOptions) (*runtime.Pager[ModelsClientListBaseModelsResponse]) {
	return runtime.NewPager(runtime.PagingHandler[ModelsClientListBaseModelsResponse]{
		More: func(page ModelsClientListBaseModelsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModelsClientListBaseModelsResponse) (ModelsClientListBaseModelsResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBaseModelsCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ModelsClientListBaseModelsResponse{}, err
			}
			return client.listBaseModelsHandleResponse(resp)
			},
	})
}

// listBaseModelsCreateRequest creates the ListBaseModels request.
func (client *ModelsClient) listBaseModelsCreateRequest(ctx context.Context, options *ModelsClientListBaseModelsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/base"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBaseModelsHandleResponse handles the ListBaseModels response.
func (client *ModelsClient) listBaseModelsHandleResponse(resp *http.Response) (ModelsClientListBaseModelsResponse, error) {
	result := ModelsClientListBaseModelsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedBaseModels); err != nil {
		return ModelsClientListBaseModelsResponse{}, err
	}
	return result, nil
}

// NewListCustomModelsPager - Gets the list of custom models for the authenticated subscription.
//
// Generated from API version 3.2
//   - options - ModelsClientListCustomModelsOptions contains the optional parameters for the ModelsClient.NewListCustomModelsPager
//     method.
func (client *ModelsClient) NewListCustomModelsPager(options *ModelsClientListCustomModelsOptions) (*runtime.Pager[ModelsClientListCustomModelsResponse]) {
	return runtime.NewPager(runtime.PagingHandler[ModelsClientListCustomModelsResponse]{
		More: func(page ModelsClientListCustomModelsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModelsClientListCustomModelsResponse) (ModelsClientListCustomModelsResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCustomModelsCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ModelsClientListCustomModelsResponse{}, err
			}
			return client.listCustomModelsHandleResponse(resp)
			},
	})
}

// listCustomModelsCreateRequest creates the ListCustomModels request.
func (client *ModelsClient) listCustomModelsCreateRequest(ctx context.Context, options *ModelsClientListCustomModelsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listCustomModelsHandleResponse handles the ListCustomModels response.
func (client *ModelsClient) listCustomModelsHandleResponse(resp *http.Response) (ModelsClientListCustomModelsResponse, error) {
	result := ModelsClientListCustomModelsResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return ModelsClientListCustomModelsResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedCustomModels); err != nil {
		return ModelsClientListCustomModelsResponse{}, err
	}
	return result, nil
}

// NewListFilesPager - Gets the files of the model identified by the given ID.
//
// Generated from API version 3.2
//   - id - The identifier of the model.
//   - options - ModelsClientListFilesOptions contains the optional parameters for the ModelsClient.NewListFilesPager method.
func (client *ModelsClient) NewListFilesPager(id string, options *ModelsClientListFilesOptions) (*runtime.Pager[ModelsClientListFilesResponse]) {
	return runtime.NewPager(runtime.PagingHandler[ModelsClientListFilesResponse]{
		More: func(page ModelsClientListFilesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModelsClientListFilesResponse) (ModelsClientListFilesResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listFilesCreateRequest(ctx, id, options)
			}, nil)
			if err != nil {
				return ModelsClientListFilesResponse{}, err
			}
			return client.listFilesHandleResponse(resp)
			},
	})
}

// listFilesCreateRequest creates the ListFiles request.
func (client *ModelsClient) listFilesCreateRequest(ctx context.Context, id string, options *ModelsClientListFilesOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}/files"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listFilesHandleResponse handles the ListFiles response.
func (client *ModelsClient) listFilesHandleResponse(resp *http.Response) (ModelsClientListFilesResponse, error) {
	result := ModelsClientListFilesResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return ModelsClientListFilesResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedFiles); err != nil {
		return ModelsClientListFilesResponse{}, err
	}
	return result, nil
}

// ListSupportedLocales - Gets a list of supported locales for model adaptation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - options - ModelsClientListSupportedLocalesOptions contains the optional parameters for the ModelsClient.ListSupportedLocales
//     method.
func (client *ModelsClient) ListSupportedLocales(ctx context.Context, options *ModelsClientListSupportedLocalesOptions) (ModelsClientListSupportedLocalesResponse, error) {
	var err error
	req, err := client.listSupportedLocalesCreateRequest(ctx, options)
	if err != nil {
		return ModelsClientListSupportedLocalesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientListSupportedLocalesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientListSupportedLocalesResponse{}, err
	}
	resp, err := client.listSupportedLocalesHandleResponse(httpResp)
	return resp, err
}

// listSupportedLocalesCreateRequest creates the ListSupportedLocales request.
func (client *ModelsClient) listSupportedLocalesCreateRequest(ctx context.Context, _ *ModelsClientListSupportedLocalesOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/locales"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSupportedLocalesHandleResponse handles the ListSupportedLocales response.
func (client *ModelsClient) listSupportedLocalesHandleResponse(resp *http.Response) (ModelsClientListSupportedLocalesResponse, error) {
	result := ModelsClientListSupportedLocalesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ModelsClientListSupportedLocalesResponse{}, err
	}
	return result, nil
}

// Update - Updates the metadata of the model identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the model.
//   - modelUpdate - The updated values for the model.
//   - options - ModelsClientUpdateOptions contains the optional parameters for the ModelsClient.Update method.
func (client *ModelsClient) Update(ctx context.Context, id string, modelUpdate ModelUpdate, options *ModelsClientUpdateOptions) (ModelsClientUpdateResponse, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, id, modelUpdate, options)
	if err != nil {
		return ModelsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *ModelsClient) updateCreateRequest(ctx context.Context, id string, modelUpdate ModelUpdate, _ *ModelsClientUpdateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/models/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, modelUpdate); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *ModelsClient) updateHandleResponse(resp *http.Response) (ModelsClientUpdateResponse, error) {
	result := ModelsClientUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return ModelsClientUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomModel); err != nil {
		return ModelsClientUpdateResponse{}, err
	}
	return result, nil
}

