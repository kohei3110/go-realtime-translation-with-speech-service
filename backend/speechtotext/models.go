// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.4, generator: @autorest/go@4.0.0-preview.70)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package speechclient

import (
	"io"
	"time"
)

// BaseModel
type BaseModel struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// The description of the object.
	Description *string

// BaseModelLinks
	Links *BaseModelLinks

// BaseModelProperties
	Properties *BaseModelProperties

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// BaseModelDeprecationDates
type BaseModelDeprecationDates struct {
// READ-ONLY; The date when adaptation becomes deprecated.
	AdaptationDateTime *time.Time

// READ-ONLY; The date when transcription becomes deprecated.
	TranscriptionDateTime *time.Time
}

// BaseModelFeatures - Features supported by the model.
type BaseModelFeatures struct {
// READ-ONLY; Supported output formats.
	SupportedOutputFormats []*OutputFormatType

// READ-ONLY; Supported dataset kinds to adapt the model.
	SupportsAdaptationsWith []*DatasetKind

// READ-ONLY; A value indicating whether creation of endpoints for live transcription is supported.
	SupportsEndpoints *bool

// READ-ONLY; A value indicating whether batch transcription is supported.
	SupportsTranscriptions *bool

// READ-ONLY; A value indicating whether this model can be used for transcription on speech container. This feature can be
// added on existing models when it becomes usable on speech container.
	SupportsTranscriptionsOnSpeechContainers *bool
}

// BaseModelLinks
type BaseModelLinks struct {
// READ-ONLY; The location to get a manifest for this model to be used in the on-prem container. See operation "Models_GetCustomModelManifest"
// for more details.
	Manifest *string
}

// BaseModelProperties
type BaseModelProperties struct {
// BaseModelDeprecationDates
	DeprecationDates *BaseModelDeprecationDates

// Features supported by the model.
	Features *BaseModelFeatures

// READ-ONLY; A value indicating whether model adaptation is charged.
	ChargeForAdaptation *bool
}

// CommitBlocksEntry - Entry of the commit block list.
type CommitBlocksEntry struct {
	ID *string

// Type of data block.
	Kind *BlockKind
}

// CustomModel
type CustomModel struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// EntityReference
	BaseModel *EntityReference

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// Datasets used for adaptation.
	Datasets []*EntityReference

// The description of the object.
	Description *string

// EntityReference
	Project *EntityReference

// CustomModelProperties
	Properties *CustomModelProperties

// The text used to adapt this language model.
	Text *string

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; CustomModelLinks
	Links *CustomModelLinks

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// CustomModelDeprecationDates
type CustomModelDeprecationDates struct {
// READ-ONLY; The date when transcription becomes deprecated.
	TranscriptionDateTime *time.Time
}

// CustomModelFeatures - Features supported by the model.
type CustomModelFeatures struct {
// READ-ONLY; Supported output formats.
	SupportedOutputFormats []*OutputFormatType

// READ-ONLY; A value indicating whether creation of endpoints for live transcription is supported.
	SupportsEndpoints *bool

// READ-ONLY; A value indicating whether batch transcription is supported.
	SupportsTranscriptions *bool

// READ-ONLY; A value indicating whether this model can be used for transcription on speech container. This feature can be
// added on existing models when it becomes usable on speech container.
	SupportsTranscriptionsOnSpeechContainers *bool
}

// CustomModelLinks
type CustomModelLinks struct {
// READ-ONLY; The location to the model copy action. See operation "Models_Copy" for more details.
	Copy *string

// READ-ONLY; The location to get all files of this entity. See operation "Models_ListFiles" for more details.
	Files *string

// READ-ONLY; The location to get a manifest for this model to be used in the on-prem container. See operation "Models_GetCustomModelManifest"
// for more details.
	Manifest *string
}

// CustomModelProperties
type CustomModelProperties struct {
// The weight of custom model between 1 (1% custom model and 99% base model) and 100 (100% custom model and 0% base model).
// When this property is not set, the service chooses a suitable value (get the
// model to retrieve the selected weight). Start without using this property. If needed, choose a larger (or smaller) weight
// to increase (or decrease) the impact of the custom model.
	CustomModelWeightPercent *int32

// The email address to send email notifications to in case the operation completes. The value will be removed after successfully
// sending the email.
	Email *string

// READ-ONLY; CustomModelDeprecationDates
	DeprecationDates *CustomModelDeprecationDates

// READ-ONLY; EntityError
	Error *EntityError

// READ-ONLY; Features supported by the model.
	Features *CustomModelFeatures
}

// Dataset
type Dataset struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; Type of data import.
	Kind *DatasetKind

// REQUIRED; The locale of the contained data.
	Locale *string

// The URL of the data for the dataset.
	ContentURL *string

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// EntityReference
	Project *EntityReference

// DatasetProperties
	Properties *DatasetProperties

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; DatasetLinks
	Links *DatasetLinks

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// DatasetLinks
type DatasetLinks struct {
// READ-ONLY; The location to commit the list of blocks when uploading a dataset using blocks. See operation "Datasets_CommitBlocks"
// for more details.
	CommitBlocks *string

// READ-ONLY; The location to get all files of this entity. See operation "Datasets_ListFiles" for more details.
	Files *string

// READ-ONLY; The location to list the already uploaded blocks of this entity when uploading a dataset using blocks. See operation
// "Datasets_GetBlocks" for more details.
	ListBlocks *string

// READ-ONLY; The location to upload blocks to when uploading a dataset using blocks. See operation "Datasets_UploadBlock"
// for more details.
	UploadBlocks *string
}

// DatasetProperties
type DatasetProperties struct {
// The email address to send email notifications to in case the operation completes. The value will be removed after successfully
// sending the email.
	Email *string

// The kind of text normalization.
	TextNormalizationKind *TextNormalizationKind

// READ-ONLY; The number of lines accepted for this data set.
	AcceptedLineCount *int32

// READ-ONLY; The total duration of the datasets if it contains audio files. The duration is encoded as ISO 8601 duration
// ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
	Duration *string

// READ-ONLY; EntityError
	Error *EntityError

// READ-ONLY; The number of lines rejected for this data set.
	RejectedLineCount *int32
}

// DatasetUpdate
type DatasetUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// EntityReference
	Project *EntityReference
}

// DiarizationProperties
type DiarizationProperties struct {
// REQUIRED; DiarizationSpeakersProperties
	Speakers *DiarizationSpeakersProperties
}

// DiarizationSpeakersProperties
type DiarizationSpeakersProperties struct {
// The maximum number of speakers for diarization. Must be less than 36 and larger than or equal to the minSpeakers property.
	MaxCount *int32

// A hint for the minimum number of speakers for diarization. Must be smaller than or equal to the maxSpeakers property.
	MinCount *int32
}

// EditsSummary
type EditsSummary struct {
// READ-ONLY; The optional number of edits for a given type of error of the recognized transcription in comparison with the
// human transcription.
	NumberOfEdits *int32

// READ-ONLY; The optional percentage of edits for a given type of error of the recognized transcription in comparison with
// the human transcription.
	PercentageOfAllEdits *float64
}

// Endpoint
type Endpoint struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// EntityReference
	Model *EntityReference

// EntityReference
	Project *EntityReference

// EndpointProperties
	Properties *EndpointProperties

// The text used to adapt a language model for this endpoint.
	Text *string

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; EndpointLinks
	Links *EndpointLinks

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// EndpointLinks
type EndpointLinks struct {
// READ-ONLY; The audio and transcription logs for this endpoint. See operation "Endpoints_ListLogs" for more details.
	Logs *string

// READ-ONLY; The REST endpoint for requests up to 60 seconds.
	RestConversation *string

// READ-ONLY; The REST endpoint for requests up to 60 seconds, supporting dictation of punctuation marks.
	RestDictation *string

// READ-ONLY; The REST endpoint for short requests up to 15 seconds.
	RestInteractive *string

// READ-ONLY; The Speech SDK endpoint for long requests with multiple final results.
	WebSocketConversation *string

// READ-ONLY; The Speech SDK endpoint for long requests with multiple final results, supporting dictation of punctuation marks.
	WebSocketDictation *string

// READ-ONLY; The Speech SDK endpoint for short requests up to 15 seconds with a single final result.
	WebSocketInteractive *string
}

// EndpointProperties
type EndpointProperties struct {
// The email address to send email notifications to in case the operation completes. The value will be removed after successfully
// sending the email.
	Email *string

// A value indicating whether content logging (audio & transcriptions) is being used for a deployment.
	LoggingEnabled *bool

// How long the endpoint will be kept in the system. Once the endpoint reaches the time to live after completion (successful
// or failed) it will be automatically deleted. Not setting this value or setting
// to 0 will disable automatic deletion. The longest supported duration is 31 days. The duration is encoded as ISO 8601 duration
// ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeToLive *string

// READ-ONLY; EntityError
	Error *EntityError
}

// EndpointPropertiesUpdate
type EndpointPropertiesUpdate struct {
// A value indicating whether content logging (audio & transcriptions) is being used for a deployment.
	ContentLoggingEnabled *bool
}

// EndpointUpdate
type EndpointUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// EntityReference
	Model *EntityReference

// EntityReference
	Project *EntityReference

// EndpointPropertiesUpdate
	Properties *EndpointPropertiesUpdate
}

// EntityError
type EntityError struct {
// READ-ONLY; The code of this error.
	Code *string

// READ-ONLY; The message for this error.
	Message *string
}

// EntityReference
type EntityReference struct {
// REQUIRED; The location of the referenced entity.
	Self *string
}

// Error - New format which conforms to the new Cognitive Services API guidelines which is available at
// https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
// This contains an outer error with error code, message, details, target and an
// inner error with more descriptive details.
type Error struct {
// High level error codes.
	Code *ErrorCode

// Additional supportive details regarding the error and/or expected policies.
	Details []*Error

// New Inner Error format which conforms to Cognitive Services API Guidelines which is available at
// https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
// This contains required properties ErrorCode, message and optional properties
// target, details(key value pair), inner error(this can be nested).
	InnerError *InnerError

// High level error message.
	Message *string

// The source of the error. For example it would be "documents" or "document id" in case of invalid document.
	Target *string
}

// Evaluation
type Evaluation struct {
// REQUIRED; EntityReference
	Dataset *EntityReference

// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// REQUIRED; EntityReference
	Model1 *EntityReference

// REQUIRED; EntityReference
	Model2 *EntityReference

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// EntityReference
	Project *EntityReference

// EntityReference
	Transcription1 *EntityReference

// EntityReference
	Transcription2 *EntityReference

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; EvaluationLinks
	Links *EvaluationLinks

// READ-ONLY; EvaluationProperties
	Properties *EvaluationProperties

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// EvaluationLinks
type EvaluationLinks struct {
// READ-ONLY; The location to get all files of this entity. See operation "Evaluations_ListFiles" for more details.
	Files *string
}

// EvaluationProperties
type EvaluationProperties struct {
// The email address to send email notifications to in case the operation completes. The value will be removed after successfully
// sending the email.
	Email *string

// READ-ONLY; The optional number of correctly recognized tokens by model1.
	CorrectTokenCount1 *int32

// READ-ONLY; The optional number of correctly recognized tokens by model2.
	CorrectTokenCount2 *int32

// READ-ONLY; The number of correctly recognized words by model1.
	CorrectWordCount1 *int32

// READ-ONLY; The number of correctly recognized words by model2.
	CorrectWordCount2 *int32

// READ-ONLY; EntityError
	Error *EntityError

// READ-ONLY; The number of processed sentences by model1.
	SentenceCount1 *int32

// READ-ONLY; The number of processed sentences by model2.
	SentenceCount2 *int32

// READ-ONLY; The sentence error rate of recognition with model1.
	SentenceErrorRate1 *float64

// READ-ONLY; The sentence error rate of recognition with model2.
	SentenceErrorRate2 *float64

// READ-ONLY; Optional the number of processed tokens by model1.
	TokenCount1 *int32

// READ-ONLY; The optional number of processed tokens by model2.
	TokenCount2 *int32

// READ-ONLY; The optional number of recognized tokens by model1, that are deletions.
	TokenDeletionCount1 *int32

// READ-ONLY; The optional number of recognized tokens by model2, that are deletions.
	TokenDeletionCount2 *int32

// READ-ONLY; The optional token error rate of recognition with model1.
	TokenErrorRate1 *float64

// READ-ONLY; The optional token error rate of recognition with model2.
	TokenErrorRate2 *float64

// READ-ONLY; TokenErrorDetails
	TokenErrors1 *TokenErrorDetails

// READ-ONLY; TokenErrorDetails
	TokenErrors2 *TokenErrorDetails

// READ-ONLY; The optional number of recognized tokens by model1, that are insertions.
	TokenInsertionCount1 *int32

// READ-ONLY; The optional number of recognized tokens by model2, that are insertions.
	TokenInsertionCount2 *int32

// READ-ONLY; The optional number of recognized tokens by model1, that are substitutions.
	TokenSubstitutionCount1 *int32

// READ-ONLY; The optional number of recognized tokens by model2, that are substitutions.
	TokenSubstitutionCount2 *int32

// READ-ONLY; The number of processed words by model1.
	WordCount1 *int32

// READ-ONLY; The number of processed words by model2.
	WordCount2 *int32

// READ-ONLY; The number of recognized words by model1, that are deletions.
	WordDeletionCount1 *int32

// READ-ONLY; The number of recognized words by model2, that are deletions.
	WordDeletionCount2 *int32

// READ-ONLY; The word error rate of recognition with model1.
	WordErrorRate1 *float64

// READ-ONLY; The word error rate of recognition with model2.
	WordErrorRate2 *float64

// READ-ONLY; The number of recognized words by model1, that are insertions.
	WordInsertionCount1 *int32

// READ-ONLY; The number of recognized words by model2, that are insertions.
	WordInsertionCount2 *int32

// READ-ONLY; The number of recognized words by model1, that are substitutions.
	WordSubstitutionCount1 *int32

// READ-ONLY; The number of recognized words by model2, that are substitutions.
	WordSubstitutionCount2 *int32
}

// EvaluationUpdate
type EvaluationUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// EntityReference
	Project *EntityReference
}

// File
type File struct {
// FileLinks
	Links *FileLinks

// FileProperties
	Properties *FileProperties

// READ-ONLY; The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see https://en.wikipedia.org/wiki/ISO8601#Combineddateandtime_representations).
	CreatedDateTime *time.Time

// READ-ONLY; Type of data.
	Kind *FileKind

// READ-ONLY; The name of this file.
	Name *string

// READ-ONLY; The location of this entity.
	Self *string
}

// FileLinks
type FileLinks struct {
// READ-ONLY; The url to retrieve the content of this file.
	ContentURL *string
}

// FileProperties
type FileProperties struct {
// READ-ONLY; The duration in case this file is an audio file. The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS",
// see https://en.wikipedia.org/wiki/ISO_8601#Durations).
	Duration *string

// READ-ONLY; The size of the data in bytes.
	Size *int64
}

// InnerError - New Inner Error format which conforms to Cognitive Services API Guidelines which is available at
// https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
// This contains required properties ErrorCode, message and optional properties
// target, details(key value pair), inner error(this can be nested).
type InnerError struct {
// Detailed error code enum.
	Code *DetailedErrorCode

// Additional supportive details regarding the error and/or expected policies.
	Details map[string]*string

// New Inner Error format which conforms to Cognitive Services API Guidelines which is available at
// https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
// This contains required properties ErrorCode, message and optional properties
// target, details(key value pair), inner error(this can be nested).
	InnerError *InnerError

// High level error message.
	Message *string

// The source of the error. For example it would be "documents" or "document id" in case of invalid document.
	Target *string
}

// LanguageIdentificationProperties
type LanguageIdentificationProperties struct {
// REQUIRED; The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a
// maximum of 10 candidate locales, including the main locale for the transcription, is
// supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded.
	CandidateLocales []*string

// The mode used for language identification.
	Mode *LanguageIdentificationMode

// An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.
// Keys must be locales contained in the candidate locales, values are entities
// for models of the respective locales.
	SpeechModelMapping map[string]*EntityReference
}

// ModelCopyAuthorization
type ModelCopyAuthorization struct {
// REQUIRED; The expiration date of this copy authorization.
	ExpirationDateTime *time.Time

// REQUIRED; The ID of this copy authorization.
	ID *string

// REQUIRED; The Azure Resource ID of the source speech resource.
	SourceResourceID *string

// REQUIRED; The endpoint (base url) of the target resource (with custom domain name when it is used).
	TargetResourceEndpoint *string

// REQUIRED; The Azure Resource ID of the target speech resource.
	TargetResourceID *string

// REQUIRED; The region (aka location) of the target speech resource (e.g., westus2).
	TargetResourceRegion *string
}

// ModelCopyAuthorizationDefinition
type ModelCopyAuthorizationDefinition struct {
// REQUIRED; The Azure Resource ID of the source speech resource.
	SourceResourceID *string
}

// ModelFile
type ModelFile struct {
// READ-ONLY; The url to retrieve the content of this file.
	ContentURL *string

// READ-ONLY; The name of this file.
	Name *string
}

// ModelManifest
type ModelManifest struct {
// REQUIRED; EntityReference
	Model *EntityReference

// REQUIRED; The model files of this model.
	ModelFiles []*ModelFile

// REQUIRED; The configuration for running this model in a container.
	Properties map[string]any
}

// ModelUpdate
type ModelUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// EntityReference
	Project *EntityReference
}

// Operation
type Operation struct {
// REQUIRED; The identifier of this Operation.
	ID *string

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; EntityError
	Error *EntityError

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; OperationResult
	Result *OperationResult

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// OperationResult
type OperationResult struct {
// READ-ONLY; The link to the result of the operation.
	Link *string
}

// PaginatedBaseModels
type PaginatedBaseModels struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*BaseModel
}

// PaginatedCustomModels
type PaginatedCustomModels struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*CustomModel
}

// PaginatedDatasets
type PaginatedDatasets struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*Dataset
}

// PaginatedEndpoints
type PaginatedEndpoints struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*Endpoint
}

// PaginatedEvaluations
type PaginatedEvaluations struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*Evaluation
}

// PaginatedFiles
type PaginatedFiles struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*File
}

// PaginatedProjects
type PaginatedProjects struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*Project
}

// PaginatedTranscriptions
type PaginatedTranscriptions struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*Transcription
}

// PaginatedWebHooks
type PaginatedWebHooks struct {
// READ-ONLY; A link to the next set of paginated results if there are more entities available; otherwise null.
	NextLink *string

// READ-ONLY; A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the
// results. It's recommended to build a list on the client and delete after the
// fetching of the complete list.
	Values []*WebHook
}

type PathsVt1RflDatasetsUploadPostRequestbodyContentMultipartFormDataSchema struct {
// REQUIRED; The name of this dataset.
	DisplayName *string

// REQUIRED; The kind of the dataset. Possible values are "Language", "Acoustic", "Pronunciation", "AudioFiles", "LanguageMarkdown",
// "OutputFormatting".
	Kind *string

// REQUIRED; The locale of this dataset.
	Locale *string

// The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value
// length is 256 characters and the count of allowed entries is 10.
	CustomProperties *string

// For acoustic datasets, a zip file containing the audio data and a text file containing the transcriptions for the audio
// data. For language datasets, a text file containing the language or
// pronunciation data. Required in both cases.
	Data *io.ReadSeekCloser

// Optional description of this dataset.
	Description *string

// An optional string containing the email address to send email notifications to in case the operation completes. The value
// will be removed after successfully sending the email.
	Email *string

// The optional string representation of the url of a project. If set, the dataset will be associated with that project.
	Project *string
}

// Project
type Project struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; ProjectLinks
	Links *ProjectLinks

// READ-ONLY; ProjectProperties
	Properties *ProjectProperties

// READ-ONLY; The location of this entity.
	Self *string
}

// ProjectLinks
type ProjectLinks struct {
// READ-ONLY; The location to get a list of all datasets of this project. See operation "Projects_ListDatasets" for more details.
	Datasets *string

// READ-ONLY; The location to get a list of all endpoints of this project. See operation "Projects_ListEndpoints" for more
// details.
	Endpoints *string

// READ-ONLY; The location to get a list of all evaluations of this project. See operation "Projects_ListEvaluations" for
// more details.
	Evaluations *string

// READ-ONLY; The location to get a list of all models of this project. See operation "Projects_ListModels" for more details.
	Models *string

// READ-ONLY; The location to get a list of all transcriptions of this project. See operation "Projects_ListTranscriptions"
// for more details.
	Transcriptions *string
}

// ProjectProperties
type ProjectProperties struct {
// READ-ONLY; The number of datasets associated to this project.
	DatasetCount *int32

// READ-ONLY; The number of endpoints associated to this project.
	EndpointCount *int32

// READ-ONLY; The number of evaluations associated to this project.
	EvaluationCount *int32

// READ-ONLY; The number of models associated to this project.
	ModelCount *int32

// READ-ONLY; The number of transcriptions associated to this project.
	TranscriptionCount *int32
}

// ProjectUpdate
type ProjectUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string
}

// ResponseBlock.
type ResponseBlock struct {
// The name of the block.
	Name *string

// The size of the block.
	Size *int32
}

// SharedModel
type SharedModel struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data.
	Locale *string

// The description of the object.
	Description *string

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// SharedModelFeatures - Features supported by the model.
type SharedModelFeatures struct {
// READ-ONLY; Supported output formats.
	SupportedOutputFormats []*OutputFormatType

// READ-ONLY; A value indicating whether creation of endpoints for live transcription is supported.
	SupportsEndpoints *bool

// READ-ONLY; A value indicating whether batch transcription is supported.
	SupportsTranscriptions *bool

// READ-ONLY; A value indicating whether this model can be used for transcription on speech container. This feature can be
// added on existing models when it becomes usable on speech container.
	SupportsTranscriptionsOnSpeechContainers *bool
}

// TokenErrorDetails
type TokenErrorDetails struct {
// READ-ONLY; EditsSummary
	Capitalization *EditsSummary

// READ-ONLY; EditsSummary
	InverseTextNormalization *EditsSummary

// READ-ONLY; EditsSummary
	Lexical *EditsSummary

// READ-ONLY; EditsSummary
	Others *EditsSummary

// READ-ONLY; EditsSummary
	Punctuation *EditsSummary
}

// Transcription
type Transcription struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech
// for which no language could be detected.
	Locale *string

// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and
// a maximum number of 10000 blobs. The maximum size for a blob is 2.5GB.
// Container SAS should contain 'r' (read) and 'l' (list) permissions. This property will not be returned in a response.
	ContentContainerURL *string

// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed. This property will not be returned
// in a response.
	ContentUrls []*string

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// EntityReference
	Dataset *EntityReference

// The description of the object.
	Description *string

// EntityReference
	Model *EntityReference

// EntityReference
	Project *EntityReference

// TranscriptionProperties
	Properties *TranscriptionProperties

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; TranscriptionLinks
	Links *TranscriptionLinks

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// TranscriptionLinks
type TranscriptionLinks struct {
// READ-ONLY; The location to get all files of this entity. See operation "Transcriptions_ListFiles" for more details.
	Files *string
}

// TranscriptionProperties
type TranscriptionProperties struct {
// A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered.
	Channels []*int32

// The requested destination container.
// REMARKS
// When a destination container is used in combination with a timeToLive, the metadata of a transcription will be deleted
// normally, but the data stored in the destination container, including
// transcription results, will remain untouched, because no delete permissions are required for this container.
// To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)"
// instead of destinationContainerUrl, where blobs can be cleaned up.
	DestinationContainerURL *string

// DiarizationProperties
	Diarization *DiarizationProperties

// A value indicating whether diarization (speaker identification) is requested. The default value is false. If this field
// is set to true and the improved diarization system is configured by specifying
// DiarizationProperties, the improved diarization system will provide diarization for a configurable range of speakers. If
// this field is set to true and the improved diarization system is not enabled
// (not specifyingDiarizationProperties), the basic diarization system will distinguish between up to two speakers. No extra
// charges are applied for the basic diarization.
// The basic diarization system is deprecated and will be removed in the next major version of the API. This diarizationEnabled
// setting will also be removed.
	DiarizationEnabled *bool

// A value indicating whether word level timestamps for the display form are requested. The default value is false.
	DisplayFormWordLevelTimestampsEnabled *bool

// The email address to send email notifications to in case the operation completes. The value will be removed after successfully
// sending the email.
	Email *string

// LanguageIdentificationProperties
	LanguageIdentification *LanguageIdentificationProperties

// Mode of profanity filtering.
	ProfanityFilterMode *ProfanityFilterMode

// The mode used for punctuation.
	PunctuationMode *PunctuationMode

// How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to
// live after completion (successful or failed) it will be automatically deleted.
// Not setting this value or setting it to 0 will disable automatic deletion. The longest supported duration is 31 days. The
// duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see
// https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeToLive *string

// A value indicating whether word level timestamps are requested. The default value isfalse.
	WordLevelTimestampsEnabled *bool

// READ-ONLY; The duration of the transcription. The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
	Duration *string

// READ-ONLY; EntityError
	Error *EntityError
}

// TranscriptionUpdate
type TranscriptionUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// EntityReference
	Project *EntityReference
}

// UploadedBlocks - List of uploaded blocks.
type UploadedBlocks struct {
// The block description of blocks already committed.
	CommittedBlocks []*ResponseBlock

// The block description of blocks not committed to the blob.
	UncommittedBlocks []*ResponseBlock
}

// WebHook
type WebHook struct {
// REQUIRED; The display name of the object.
	DisplayName *string

// REQUIRED; WebHookEvents
	Events *WebHookEvents

// REQUIRED; The registered URL that will be used to send the POST requests for the registered events to.
	WebURL *string

// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// WebHookProperties
	Properties *WebHookProperties

// READ-ONLY; The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format ("YYYY-MM-DDThh:mm:ssZ",
// see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	CreatedDateTime *time.Time

// READ-ONLY; The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format
// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO8601#Combineddateand
// time_representations).
	LastActionDateTime *time.Time

// READ-ONLY; WebHookLinks
	Links *WebHookLinks

// READ-ONLY; The location of this entity.
	Self *string

// READ-ONLY; Describe the current state of the API.
	Status *Status
}

// WebHookEvents
type WebHookEvents struct {
	Challenge *bool
	DatasetCompletion *bool
	DatasetCreation *bool
	DatasetDeletion *bool
	DatasetProcessing *bool
	EndpointCompletion *bool
	EndpointCreation *bool
	EndpointDeletion *bool
	EndpointProcessing *bool
	EvaluationCompletion *bool
	EvaluationCreation *bool
	EvaluationDeletion *bool
	EvaluationProcessing *bool
	ModelCompletion *bool
	ModelCreation *bool
	ModelDeletion *bool
	ModelProcessing *bool
	Ping *bool
	TranscriptionCompletion *bool
	TranscriptionCreation *bool
	TranscriptionDeletion *bool
	TranscriptionProcessing *bool
}

// WebHookLinks
type WebHookLinks struct {
// READ-ONLY; The URL that can be used to trigger the sending of a ping event to the registered URL of a web hook registration.
// See operation "WebHooks_Ping" for more details.
	Ping *string

// READ-ONLY; The URL that can be used sending test events to the registered URL of a web hook registration. See operation
// "WebHooks_Test" for more details.
	Test *string
}

// WebHookProperties
type WebHookProperties struct {
// A secret that will be used to create a SHA256 hash of the payload with the secret as HMAC key. This hash will be set as
// X-MicrosoftSpeechServices-Signature header when calling back into the registered
// URL.
	Secret *string

// READ-ONLY; The API version the web hook was created in. This defines the shape of the payload in the callbacks. If the
// payload type is not supported anymore, because the shape changed and the API version using
// it is removed (after deprecation), the web hook will be disabled.
	APIVersion *string

// READ-ONLY; EntityError
	Error *EntityError
}

// WebHookPropertiesUpdate
type WebHookPropertiesUpdate struct {
// A secret that will be used to create a SHA256 hash of the payload with the secret as HMAC key. This hash will be set as
// X-MicrosoftSpeechServices-Signature header when calling back into the registered
// URL.
	Secret *string
}

// WebHookUpdate
type WebHookUpdate struct {
// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length
// is 256 characters and the count of allowed entries is 10.
	CustomProperties map[string]*string

// The description of the object.
	Description *string

// The name of the object.
	DisplayName *string

// WebHookEvents
	Events *WebHookEvents

// WebHookPropertiesUpdate
	Properties *WebHookPropertiesUpdate

// The registered URL that will be used to send the POST requests for the registered events to.
	WebURL *string
}

