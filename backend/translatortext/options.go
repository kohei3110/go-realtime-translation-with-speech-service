// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.4, generator: @autorest/go@4.0.0-preview.70)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package translatortext

// TranslatorClientBreakSentenceOptions contains the optional parameters for the TranslatorClient.BreakSentence method.
type TranslatorClientBreakSentenceOptions struct {
// Language tag of the language of the input text. If not specified, Translator will apply automatic language detection.
	Language *string

// Script identifier of the script used by the input text. If a script is not specified, the default script of the language
// will be assumed.
	Script *string

// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientDetectOptions contains the optional parameters for the TranslatorClient.Detect method.
type TranslatorClientDetectOptions struct {
// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientDictionaryExamplesOptions contains the optional parameters for the TranslatorClient.DictionaryExamples
// method.
type TranslatorClientDictionaryExamplesOptions struct {
// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientDictionaryLookupOptions contains the optional parameters for the TranslatorClient.DictionaryLookup method.
type TranslatorClientDictionaryLookupOptions struct {
// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientLanguagesOptions contains the optional parameters for the TranslatorClient.Languages method.
type TranslatorClientLanguagesOptions struct {
// The language to use for user interface strings. Some of the fields in the response are names of languages or names of regions.
// Use this parameter to define the language in which these names are
// returned. The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value fr to request
// names in French or use the value zh-Hant to request names in Chinese
// Traditional. Names are provided in the English language when a target language is not specified or when localization is
// not available.
	AcceptLanguage *string

// A comma-separated list of names defining the group of languages to return. Allowed group names are- translation, transliteration
// and dictionary. If no scope is given, then all groups are returned,
// which is equivalent to passing scope=translation,transliteration,dictionary. To decide which set of supported languages
// is appropriate for your scenario, see the description of the response object.
	Scope []Get1ItemsItem

// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientTranslateOptions contains the optional parameters for the TranslatorClient.Translate method.
type TranslatorClientTranslateOptions struct {
// A string specifying the category (domain) of the translation. This parameter retrieves translations from a customized system
// built with Custom Translator. Default value is general.
	Category *string

// Specifies the language of the input text. Find which languages are available to translate from by using the languages method.
// If the from parameter is not specified, automatic language detection is
// applied to determine the source language.
	From *string

// Specifies the script of the input text. Supported scripts are available from the languages method
	FromScript *string

// Specifies whether to include alignment projection from source text to translated text. Possible values are- true or false
// (default).
	IncludeAlignment *bool

// Specifies whether to include sentence boundaries for the input text and the translated text. Possible values are- true
// or false (default).
	IncludeSentenceLength *bool

// Specifies how profanities should be treated in translations. Possible values are: NoAction (default), Marked or Deleted.
// HANDLING PROFANITY
// Normally the Translator service will retain profanity that is present in the source in the translation. The degree of profanity
// and the context that makes words profane differ between cultures, and as
// a result the degree of profanity in the target language may be amplified or reduced.
// If you want to avoid getting profanity in the translation, regardless of the presence of profanity in the source text,
// you can use the profanity filtering option. The option allows you to choose
// whether you want to see profanity deleted, whether you want to mark profanities with appropriate tags (giving you the option
// to add your own post-processing), or you want no action taken. The accepted
// values of ProfanityAction are Deleted, Marked and NoAction (default).
// PROFANITYACTION ACTION
// NoAction This is the default behavior. Profanity will pass from source to target.
// Example Source (Japanese)- 彼はジャッカスです。
// Example Translation (English)- He is a jackass.
// Deleted Profane words will be removed from the output without replacement.
// Example Source (Japanese)- 彼はジャッカスです。
// Example Translation (English)- He is a.
// Marked Profane words are replaced by a marker in the output. The marker depends on the ProfanityMarker parameter.
// For ProfanityMarker=Asterisk, profane words are replaced with ***
// Example Source (Japanese)- 彼はジャッカスです。
// Example Translation (English)- He is a ***.
// For ProfanityMarker=Tag, profane words are surrounded by XML tags and
// Example Source (Japanese)- 彼はジャッカスです。
// Example Translation (English)- He is a jackass.
	ProfanityAction *Enum2

// Specifies how profanities should be marked in translations. Possible values are- Asterisk (default) or Tag.
	ProfanityMarker *string

// Specifies a fallback language if the language of the input text can't be identified. Language auto-detection is applied
// when the from parameter is omitted. If detection fails, the suggestedFrom
// language will be assumed.
	SuggestedFrom *string

// Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed, complete HTML
// element. Possible values are plain (default) or html
	TextType *Enum1

// Specifies the script of the translated text. Supported scripts are available from the languages method
	ToScript []string

// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

// TranslatorClientTransliterateOptions contains the optional parameters for the TranslatorClient.Transliterate method.
type TranslatorClientTransliterateOptions struct {
// A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID
// in the query string using a query parameter named ClientTraceId.
	XClientTraceID *string
}

