// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.4, generator: @autorest/go@4.0.0-preview.70)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package speechclient

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// EndpointsClient contains the methods for the Endpoints group.
// Don't use this type directly, use a constructor function instead.
type EndpointsClient struct {
	internal *azcore.Client
	endpoint string
}

// Create - Creates a new endpoint.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - endpoint - The details of the endpoint.
//   - options - EndpointsClientCreateOptions contains the optional parameters for the EndpointsClient.Create method.
func (client *EndpointsClient) Create(ctx context.Context, endpoint Endpoint, options *EndpointsClientCreateOptions) (EndpointsClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, endpoint, options)
	if err != nil {
		return EndpointsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *EndpointsClient) createCreateRequest(ctx context.Context, endpoint Endpoint, _ *EndpointsClientCreateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, endpoint); err != nil {
	return nil, err
}
;	return req, nil
}

// createHandleResponse handles the Create response.
func (client *EndpointsClient) createHandleResponse(resp *http.Response) (EndpointsClientCreateResponse, error) {
	result := EndpointsClientCreateResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Endpoint); err != nil {
		return EndpointsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the endpoint identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - options - EndpointsClientDeleteOptions contains the optional parameters for the EndpointsClient.Delete method.
func (client *EndpointsClient) Delete(ctx context.Context, id string, options *EndpointsClientDeleteOptions) (EndpointsClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, id, options)
	if err != nil {
		return EndpointsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientDeleteResponse{}, err
	}
	return EndpointsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EndpointsClient) deleteCreateRequest(ctx context.Context, id string, _ *EndpointsClientDeleteOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteBaseModelLog - Deletes one audio or transcription log that have been stored when using the default base model of
// a given language.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - locale - The language used to select the default base model.
//   - logID - The identifier of the log.
//   - options - EndpointsClientDeleteBaseModelLogOptions contains the optional parameters for the EndpointsClient.DeleteBaseModelLog
//     method.
func (client *EndpointsClient) DeleteBaseModelLog(ctx context.Context, locale string, logID string, options *EndpointsClientDeleteBaseModelLogOptions) (EndpointsClientDeleteBaseModelLogResponse, error) {
	var err error
	req, err := client.deleteBaseModelLogCreateRequest(ctx, locale, logID, options)
	if err != nil {
		return EndpointsClientDeleteBaseModelLogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientDeleteBaseModelLogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientDeleteBaseModelLogResponse{}, err
	}
	return EndpointsClientDeleteBaseModelLogResponse{}, nil
}

// deleteBaseModelLogCreateRequest creates the DeleteBaseModelLog request.
func (client *EndpointsClient) deleteBaseModelLogCreateRequest(ctx context.Context, locale string, logID string, _ *EndpointsClientDeleteBaseModelLogOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/base/{locale}/files/logs/{logId}"
	if locale == "" {
		return nil, errors.New("parameter locale cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locale}", url.PathEscape(locale))
	if logID == "" {
		return nil, errors.New("parameter logID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{logId}", url.PathEscape(logID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteBaseModelLogs - Deletion process is done asynchronously and can take up to one day depending on the amount of log
// files.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - locale - The language used to select the default base model.
//   - options - EndpointsClientDeleteBaseModelLogsOptions contains the optional parameters for the EndpointsClient.DeleteBaseModelLogs
//     method.
func (client *EndpointsClient) DeleteBaseModelLogs(ctx context.Context, locale string, options *EndpointsClientDeleteBaseModelLogsOptions) (EndpointsClientDeleteBaseModelLogsResponse, error) {
	var err error
	req, err := client.deleteBaseModelLogsCreateRequest(ctx, locale, options)
	if err != nil {
		return EndpointsClientDeleteBaseModelLogsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientDeleteBaseModelLogsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientDeleteBaseModelLogsResponse{}, err
	}
	return EndpointsClientDeleteBaseModelLogsResponse{}, nil
}

// deleteBaseModelLogsCreateRequest creates the DeleteBaseModelLogs request.
func (client *EndpointsClient) deleteBaseModelLogsCreateRequest(ctx context.Context, locale string, options *EndpointsClientDeleteBaseModelLogsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/base/{locale}/files/logs"
	if locale == "" {
		return nil, errors.New("parameter locale cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locale}", url.PathEscape(locale))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.EndDate != nil {
		reqQP.Set("endDate", *options.EndDate)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteLog - Deletes one audio or transcription log that have been stored for a given endpoint.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - logID - The identifier of the log.
//   - options - EndpointsClientDeleteLogOptions contains the optional parameters for the EndpointsClient.DeleteLog method.
func (client *EndpointsClient) DeleteLog(ctx context.Context, id string, logID string, options *EndpointsClientDeleteLogOptions) (EndpointsClientDeleteLogResponse, error) {
	var err error
	req, err := client.deleteLogCreateRequest(ctx, id, logID, options)
	if err != nil {
		return EndpointsClientDeleteLogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientDeleteLogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientDeleteLogResponse{}, err
	}
	return EndpointsClientDeleteLogResponse{}, nil
}

// deleteLogCreateRequest creates the DeleteLog request.
func (client *EndpointsClient) deleteLogCreateRequest(ctx context.Context, id string, logID string, _ *EndpointsClientDeleteLogOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}/files/logs/{logId}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	if logID == "" {
		return nil, errors.New("parameter logID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{logId}", url.PathEscape(logID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteLogs - The deletion process is done asynchronously and can take up to one day depending on the amount of log files.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - options - EndpointsClientDeleteLogsOptions contains the optional parameters for the EndpointsClient.DeleteLogs method.
func (client *EndpointsClient) DeleteLogs(ctx context.Context, id string, options *EndpointsClientDeleteLogsOptions) (EndpointsClientDeleteLogsResponse, error) {
	var err error
	req, err := client.deleteLogsCreateRequest(ctx, id, options)
	if err != nil {
		return EndpointsClientDeleteLogsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientDeleteLogsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientDeleteLogsResponse{}, err
	}
	return EndpointsClientDeleteLogsResponse{}, nil
}

// deleteLogsCreateRequest creates the DeleteLogs request.
func (client *EndpointsClient) deleteLogsCreateRequest(ctx context.Context, id string, options *EndpointsClientDeleteLogsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}/files/logs"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.EndDate != nil {
		reqQP.Set("endDate", *options.EndDate)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the endpoint identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - options - EndpointsClientGetOptions contains the optional parameters for the EndpointsClient.Get method.
func (client *EndpointsClient) Get(ctx context.Context, id string, options *EndpointsClientGetOptions) (EndpointsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, id, options)
	if err != nil {
		return EndpointsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EndpointsClient) getCreateRequest(ctx context.Context, id string, _ *EndpointsClientGetOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EndpointsClient) getHandleResponse(resp *http.Response) (EndpointsClientGetResponse, error) {
	result := EndpointsClientGetResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return EndpointsClientGetResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Endpoint); err != nil {
		return EndpointsClientGetResponse{}, err
	}
	return result, nil
}

// GetBaseModelLog - Gets a specific audio or transcription log for the default base model in a given language.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - locale - The language used to select the default base model.
//   - logID - The identifier of the log.
//   - options - EndpointsClientGetBaseModelLogOptions contains the optional parameters for the EndpointsClient.GetBaseModelLog
//     method.
func (client *EndpointsClient) GetBaseModelLog(ctx context.Context, locale string, logID string, options *EndpointsClientGetBaseModelLogOptions) (EndpointsClientGetBaseModelLogResponse, error) {
	var err error
	req, err := client.getBaseModelLogCreateRequest(ctx, locale, logID, options)
	if err != nil {
		return EndpointsClientGetBaseModelLogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientGetBaseModelLogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientGetBaseModelLogResponse{}, err
	}
	resp, err := client.getBaseModelLogHandleResponse(httpResp)
	return resp, err
}

// getBaseModelLogCreateRequest creates the GetBaseModelLog request.
func (client *EndpointsClient) getBaseModelLogCreateRequest(ctx context.Context, locale string, logID string, options *EndpointsClientGetBaseModelLogOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/base/{locale}/files/logs/{logId}"
	if locale == "" {
		return nil, errors.New("parameter locale cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locale}", url.PathEscape(locale))
	if logID == "" {
		return nil, errors.New("parameter logID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{logId}", url.PathEscape(logID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBaseModelLogHandleResponse handles the GetBaseModelLog response.
func (client *EndpointsClient) getBaseModelLogHandleResponse(resp *http.Response) (EndpointsClientGetBaseModelLogResponse, error) {
	result := EndpointsClientGetBaseModelLogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.File); err != nil {
		return EndpointsClientGetBaseModelLogResponse{}, err
	}
	return result, nil
}

// GetLog - Gets a specific audio or transcription log for a given endpoint.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - logID - The identifier of the log.
//   - options - EndpointsClientGetLogOptions contains the optional parameters for the EndpointsClient.GetLog method.
func (client *EndpointsClient) GetLog(ctx context.Context, id string, logID string, options *EndpointsClientGetLogOptions) (EndpointsClientGetLogResponse, error) {
	var err error
	req, err := client.getLogCreateRequest(ctx, id, logID, options)
	if err != nil {
		return EndpointsClientGetLogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientGetLogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientGetLogResponse{}, err
	}
	resp, err := client.getLogHandleResponse(httpResp)
	return resp, err
}

// getLogCreateRequest creates the GetLog request.
func (client *EndpointsClient) getLogCreateRequest(ctx context.Context, id string, logID string, options *EndpointsClientGetLogOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}/files/logs/{logId}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	if logID == "" {
		return nil, errors.New("parameter logID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{logId}", url.PathEscape(logID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLogHandleResponse handles the GetLog response.
func (client *EndpointsClient) getLogHandleResponse(resp *http.Response) (EndpointsClientGetLogResponse, error) {
	result := EndpointsClientGetLogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.File); err != nil {
		return EndpointsClientGetLogResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the list of endpoints for the authenticated subscription.
//
// Generated from API version 3.2
//   - options - EndpointsClientListOptions contains the optional parameters for the EndpointsClient.NewListPager method.
func (client *EndpointsClient) NewListPager(options *EndpointsClientListOptions) (*runtime.Pager[EndpointsClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[EndpointsClientListResponse]{
		More: func(page EndpointsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EndpointsClientListResponse) (EndpointsClientListResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return EndpointsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
			},
	})
}

// listCreateRequest creates the List request.
func (client *EndpointsClient) listCreateRequest(ctx context.Context, options *EndpointsClientListOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *EndpointsClient) listHandleResponse(resp *http.Response) (EndpointsClientListResponse, error) {
	result := EndpointsClientListResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return EndpointsClientListResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedEndpoints); err != nil {
		return EndpointsClientListResponse{}, err
	}
	return result, nil
}

// NewListBaseModelLogsPager - Gets the list of audio and transcription logs that have been stored when using the default
// base model of a given language.
//
// Generated from API version 3.2
//   - locale - The language used to select the default base model.
//   - options - EndpointsClientListBaseModelLogsOptions contains the optional parameters for the EndpointsClient.NewListBaseModelLogsPager
//     method.
func (client *EndpointsClient) NewListBaseModelLogsPager(locale string, options *EndpointsClientListBaseModelLogsOptions) (*runtime.Pager[EndpointsClientListBaseModelLogsResponse]) {
	return runtime.NewPager(runtime.PagingHandler[EndpointsClientListBaseModelLogsResponse]{
		More: func(page EndpointsClientListBaseModelLogsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EndpointsClientListBaseModelLogsResponse) (EndpointsClientListBaseModelLogsResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBaseModelLogsCreateRequest(ctx, locale, options)
			}, nil)
			if err != nil {
				return EndpointsClientListBaseModelLogsResponse{}, err
			}
			return client.listBaseModelLogsHandleResponse(resp)
			},
	})
}

// listBaseModelLogsCreateRequest creates the ListBaseModelLogs request.
func (client *EndpointsClient) listBaseModelLogsCreateRequest(ctx context.Context, locale string, options *EndpointsClientListBaseModelLogsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/base/{locale}/files/logs"
	if locale == "" {
		return nil, errors.New("parameter locale cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locale}", url.PathEscape(locale))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBaseModelLogsHandleResponse handles the ListBaseModelLogs response.
func (client *EndpointsClient) listBaseModelLogsHandleResponse(resp *http.Response) (EndpointsClientListBaseModelLogsResponse, error) {
	result := EndpointsClientListBaseModelLogsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedFiles); err != nil {
		return EndpointsClientListBaseModelLogsResponse{}, err
	}
	return result, nil
}

// NewListLogsPager - Gets the list of audio and transcription logs that have been stored for a given endpoint.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - options - EndpointsClientListLogsOptions contains the optional parameters for the EndpointsClient.NewListLogsPager method.
func (client *EndpointsClient) NewListLogsPager(id string, options *EndpointsClientListLogsOptions) (*runtime.Pager[EndpointsClientListLogsResponse]) {
	return runtime.NewPager(runtime.PagingHandler[EndpointsClientListLogsResponse]{
		More: func(page EndpointsClientListLogsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EndpointsClientListLogsResponse) (EndpointsClientListLogsResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listLogsCreateRequest(ctx, id, options)
			}, nil)
			if err != nil {
				return EndpointsClientListLogsResponse{}, err
			}
			return client.listLogsHandleResponse(resp)
			},
	})
}

// listLogsCreateRequest creates the ListLogs request.
func (client *EndpointsClient) listLogsCreateRequest(ctx context.Context, id string, options *EndpointsClientListLogsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}/files/logs"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SasValidityInSeconds != nil {
		reqQP.Set("sasValidityInSeconds", strconv.FormatInt(int64(*options.SasValidityInSeconds), 10))
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listLogsHandleResponse handles the ListLogs response.
func (client *EndpointsClient) listLogsHandleResponse(resp *http.Response) (EndpointsClientListLogsResponse, error) {
	result := EndpointsClientListLogsResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return EndpointsClientListLogsResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedFiles); err != nil {
		return EndpointsClientListLogsResponse{}, err
	}
	return result, nil
}

// ListSupportedLocales - Gets a list of supported locales for endpoint creations.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - options - EndpointsClientListSupportedLocalesOptions contains the optional parameters for the EndpointsClient.ListSupportedLocales
//     method.
func (client *EndpointsClient) ListSupportedLocales(ctx context.Context, options *EndpointsClientListSupportedLocalesOptions) (EndpointsClientListSupportedLocalesResponse, error) {
	var err error
	req, err := client.listSupportedLocalesCreateRequest(ctx, options)
	if err != nil {
		return EndpointsClientListSupportedLocalesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientListSupportedLocalesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientListSupportedLocalesResponse{}, err
	}
	resp, err := client.listSupportedLocalesHandleResponse(httpResp)
	return resp, err
}

// listSupportedLocalesCreateRequest creates the ListSupportedLocales request.
func (client *EndpointsClient) listSupportedLocalesCreateRequest(ctx context.Context, _ *EndpointsClientListSupportedLocalesOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/locales"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSupportedLocalesHandleResponse handles the ListSupportedLocales response.
func (client *EndpointsClient) listSupportedLocalesHandleResponse(resp *http.Response) (EndpointsClientListSupportedLocalesResponse, error) {
	result := EndpointsClientListSupportedLocalesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return EndpointsClientListSupportedLocalesResponse{}, err
	}
	return result, nil
}

// Update - Updates the metadata of the endpoint identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the endpoint.
//   - endpointUpdate - The updated values for the endpoint.
//   - options - EndpointsClientUpdateOptions contains the optional parameters for the EndpointsClient.Update method.
func (client *EndpointsClient) Update(ctx context.Context, id string, endpointUpdate EndpointUpdate, options *EndpointsClientUpdateOptions) (EndpointsClientUpdateResponse, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, id, endpointUpdate, options)
	if err != nil {
		return EndpointsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EndpointsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EndpointsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *EndpointsClient) updateCreateRequest(ctx context.Context, id string, endpointUpdate EndpointUpdate, _ *EndpointsClientUpdateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/endpoints/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, endpointUpdate); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *EndpointsClient) updateHandleResponse(resp *http.Response) (EndpointsClientUpdateResponse, error) {
	result := EndpointsClientUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return EndpointsClientUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Endpoint); err != nil {
		return EndpointsClientUpdateResponse{}, err
	}
	return result, nil
}

