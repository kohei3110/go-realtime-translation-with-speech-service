// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.4, generator: @autorest/go@4.0.0-preview.70)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package speechclient

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// WebHooksClient contains the methods for the WebHooks group.
// Don't use this type directly, use a constructor function instead.
type WebHooksClient struct {
	internal *azcore.Client
	endpoint string
}

// Create - If the property secret in the configuration is present and contains a non-empty string, it will be used to create
// a SHA256 hash of the payload with the secret as HMAC key. This hash will be set as
// X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.
// When calling back into the registered URL, the request will contain a X-MicrosoftSpeechServices-Event header containing
// one of the registered event types. There will be one request per registered
// event type.
// After successfully registering the web hook, it will not be usable until a challenge/response is completed. To do this,
// a request with the event type challenge will be made with a query parameter
// called validationToken. Respond to the challenge with a 200 OK containing the value of the validationToken query parameter
// as the response body. When the challenge/response is successfully completed,
// the web hook will begin receiving events.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - webHook - The details of the new web hook.
//   - options - WebHooksClientCreateOptions contains the optional parameters for the WebHooksClient.Create method.
func (client *WebHooksClient) Create(ctx context.Context, webHook WebHook, options *WebHooksClientCreateOptions) (WebHooksClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, webHook, options)
	if err != nil {
		return WebHooksClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *WebHooksClient) createCreateRequest(ctx context.Context, webHook WebHook, _ *WebHooksClientCreateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, webHook); err != nil {
	return nil, err
}
;	return req, nil
}

// createHandleResponse handles the Create response.
func (client *WebHooksClient) createHandleResponse(resp *http.Response) (WebHooksClientCreateResponse, error) {
	result := WebHooksClientCreateResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebHook); err != nil {
		return WebHooksClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the web hook identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the web hook.
//   - options - WebHooksClientDeleteOptions contains the optional parameters for the WebHooksClient.Delete method.
func (client *WebHooksClient) Delete(ctx context.Context, id string, options *WebHooksClientDeleteOptions) (WebHooksClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, id, options)
	if err != nil {
		return WebHooksClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientDeleteResponse{}, err
	}
	return WebHooksClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WebHooksClient) deleteCreateRequest(ctx context.Context, id string, _ *WebHooksClientDeleteOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the web hook identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the web hook.
//   - options - WebHooksClientGetOptions contains the optional parameters for the WebHooksClient.Get method.
func (client *WebHooksClient) Get(ctx context.Context, id string, options *WebHooksClientGetOptions) (WebHooksClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, id, options)
	if err != nil {
		return WebHooksClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WebHooksClient) getCreateRequest(ctx context.Context, id string, _ *WebHooksClientGetOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WebHooksClient) getHandleResponse(resp *http.Response) (WebHooksClientGetResponse, error) {
	result := WebHooksClientGetResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WebHooksClientGetResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebHook); err != nil {
		return WebHooksClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the list of web hooks for the authenticated subscription.
//
// Generated from API version 3.2
//   - options - WebHooksClientListOptions contains the optional parameters for the WebHooksClient.NewListPager method.
func (client *WebHooksClient) NewListPager(options *WebHooksClientListOptions) (*runtime.Pager[WebHooksClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[WebHooksClientListResponse]{
		More: func(page WebHooksClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WebHooksClientListResponse) (WebHooksClientListResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return WebHooksClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
			},
	})
}

// listCreateRequest creates the List request.
func (client *WebHooksClient) listCreateRequest(ctx context.Context, options *WebHooksClientListOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *WebHooksClient) listHandleResponse(resp *http.Response) (WebHooksClientListResponse, error) {
	result := WebHooksClientListResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WebHooksClientListResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PaginatedWebHooks); err != nil {
		return WebHooksClientListResponse{}, err
	}
	return result, nil
}

// Ping - The request body of the POST request sent to the registered web hook URL is of the same shape as in the GET request
// for a specific hook. The Swagger Schema ID of the model is WebHookV3.
// The request will contain a X-MicrosoftSpeechServices-Event header with the value ping. If the web hook was registered with
// a secret it will contain a X-MicrosoftSpeechServices-Signature header with an
// SHA256 hash of the payload with the secret as HMAC key. The hash is base64 encoded.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the web hook to ping.
//   - options - WebHooksClientPingOptions contains the optional parameters for the WebHooksClient.Ping method.
func (client *WebHooksClient) Ping(ctx context.Context, id string, options *WebHooksClientPingOptions) (WebHooksClientPingResponse, error) {
	var err error
	req, err := client.pingCreateRequest(ctx, id, options)
	if err != nil {
		return WebHooksClientPingResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientPingResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientPingResponse{}, err
	}
	resp, err := client.pingHandleResponse(httpResp)
	return resp, err
}

// pingCreateRequest creates the Ping request.
func (client *WebHooksClient) pingCreateRequest(ctx context.Context, id string, _ *WebHooksClientPingOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks/{id}:ping"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// pingHandleResponse handles the Ping response.
func (client *WebHooksClient) pingHandleResponse(resp *http.Response) (WebHooksClientPingResponse, error) {
	result := WebHooksClientPingResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WebHooksClientPingResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// Test - The payload will be generated from the last entity that would have invoked the web hook. If no entity is present
// for none of the registered event types, the POST will respond with 204. If a test
// request can be made, it will respond with 200. The request will contain a X-MicrosoftSpeechServices-Event header with the
// respective registered event type. If the web hook was registered with a secret
// it will contain a X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the payload with the secret as HMAC
// key. The hash is base64 encoded.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the web hook to ping.
//   - options - WebHooksClientTestOptions contains the optional parameters for the WebHooksClient.Test method.
func (client *WebHooksClient) Test(ctx context.Context, id string, options *WebHooksClientTestOptions) (WebHooksClientTestResponse, error) {
	var err error
	req, err := client.testCreateRequest(ctx, id, options)
	if err != nil {
		return WebHooksClientTestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientTestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientTestResponse{}, err
	}
	resp, err := client.testHandleResponse(httpResp)
	return resp, err
}

// testCreateRequest creates the Test request.
func (client *WebHooksClient) testCreateRequest(ctx context.Context, id string, _ *WebHooksClientTestOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks/{id}:test"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// testHandleResponse handles the Test response.
func (client *WebHooksClient) testHandleResponse(resp *http.Response) (WebHooksClientTestResponse, error) {
	result := WebHooksClientTestResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WebHooksClientTestResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// Update - If the property secret in the configuration is omitted or contains an empty string, future callbacks won't contain
// X-MicrosoftSpeechServices-Signature headers. If the property contains a non-empty
// string, it will be used to create a SHA256 hash of the payload with the secret as HMAC key. This hash will be set as X-MicrosoftSpeechServices-Signature
// header when calling back into the registered
// URL.
// If the URL changes, the web hook will stop receiving events until a challenge/response is completed. To do this, a request
// with the event type challenge will be made with a query parameter called
// validationToken. Respond to the challenge with a 200 OK containing the value of the validationToken query parameter as
// the response body. When the challenge/response is successfully completed, the web
// hook will begin receiving events.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 3.2
//   - id - The identifier of the web hook.
//   - webHookUpdate - The updated values for the web hook.
//   - options - WebHooksClientUpdateOptions contains the optional parameters for the WebHooksClient.Update method.
func (client *WebHooksClient) Update(ctx context.Context, id string, webHookUpdate WebHookUpdate, options *WebHooksClientUpdateOptions) (WebHooksClientUpdateResponse, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, id, webHookUpdate, options)
	if err != nil {
		return WebHooksClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebHooksClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WebHooksClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *WebHooksClient) updateCreateRequest(ctx context.Context, id string, webHookUpdate WebHookUpdate, _ *WebHooksClientUpdateOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext/v3.2"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/webhooks/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, webHookUpdate); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *WebHooksClient) updateHandleResponse(resp *http.Response) (WebHooksClientUpdateResponse, error) {
	result := WebHooksClientUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WebHooksClientUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebHook); err != nil {
		return WebHooksClientUpdateResponse{}, err
	}
	return result, nil
}

